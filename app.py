# app.py
# -*- coding: utf-8 -*-
import re
import random
import streamlit as st
from collections import Counter

# ---------- Page config ----------
st.set_page_config(
    page_title="Lao Lotto ‚Äî ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå & ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (4 ‡∏´‡∏•‡∏±‡∏Å)",
    page_icon="icon.png",
    layout="centered",
)

# ---------- (CSS) ‡∏Ç‡∏≤‡∏ß-‡πÅ‡∏î‡∏á-‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô ----------
st.markdown("""
<style>
/* ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≤‡∏ß */
.stApp { background:#ffffff; color:#111; }
.block-container { max-width: 860px; }

/* ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠/‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ ‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô */
h1, .title-blue, .desc-blue { color:#0b5ed7 !important; }

/* ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå */
.card {
  background:#ffffff; border:2px solid #0b5ed7; border-radius:14px;
  padding:16px 18px; margin:12px 0;
}

/* ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏™‡∏µ‡πÅ‡∏î‡∏á */
.num-red { color:#d90429; font-weight:800; }

/* ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç: ‡∏Ç‡πâ‡∏≠ 1 ‡πÉ‡∏´‡∏ç‡πà‡∏™‡∏∏‡∏î */
.step1 { font-size: 3rem; line-height:1; }
.step2 { font-size: 1.8rem; }
.step3 { font-size: 1.8rem; }
.step4 { font-size: 1.8rem; }

/* ‡∏õ‡πâ‡∏≤‡∏¢‡∏´‡∏±‡∏ß‡∏Å‡∏≤‡∏£‡πå‡∏î */
.card h3 { margin:0 0 6px 0; color:#0b5ed7; }

/* ‡∏õ‡∏∏‡πà‡∏° */
.stButton>button { background:#0b5ed7; color:#fff; border:none; border-radius:10px; padding:0.6rem 1rem; }
.stButton>button:hover { background:#0a53be; }
</style>
""", unsafe_allow_html=True)

# ---------- ‡∏´‡∏±‡∏ß‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô ----------
st.markdown("<h1>üá±üá¶ Lao Lotto ‚Äî ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå & ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ (4 ‡∏´‡∏•‡∏±‡∏Å)</h1>", unsafe_allow_html=True)
st.markdown("""
<div class="desc-blue">
‡∏ß‡∏≤‡∏á‡πÄ‡∏•‡∏Ç 4 ‡∏´‡∏•‡∏±‡∏Å ‡∏ó‡∏µ‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 10 ‡∏á‡∏ß‡∏î) ‚Äî ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÅ‡∏•‡∏∞‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 4 ‡∏´‡∏•‡∏±‡∏Å‡∏à‡∏∞‡πÉ‡∏ä‡πâ 4 ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î ‡∏ß‡∏≤‡∏á‡πÄ‡∏•‡∏Ç 4 ‡∏´‡∏•‡∏±‡∏Å
</div>
""", unsafe_allow_html=True)

st.markdown("---")

# ---------- Input ----------
EXAMPLE = "6828\n0543\n0862\n9252\n9767\n5319"
raw = st.text_area("‡∏ß‡∏≤‡∏á‡πÄ‡∏•‡∏Ç 4 ‡∏´‡∏•‡∏±‡∏Å ‡∏ó‡∏µ‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î (‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏á‡∏ß‡∏î)", value=EXAMPLE, height=220)

# ---------- Cleaning: ‡πÄ‡∏Å‡πá‡∏ö ‚Äú4 ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î‚Äù ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î ----------
def clean_to_last4(line: str) -> str | None:
    # ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    digits = re.findall(r"\d", line)
    if not digits:
        return None
    # ‡πÉ‡∏ä‡πâ 4 ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î
    last4 = "".join(digits[-4:])
    return last4 if len(last4) == 4 else None

lines = [ln for ln in raw.splitlines() if ln.strip()]
draws = []
for ln in lines:
    v = clean_to_last4(ln)
    if v is not None:
        draws.append(v)

st.write(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ: **{len(draws)}** ‡∏á‡∏ß‡∏î")
if len(draws) < 3:
    st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ß‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ **3 ‡∏á‡∏ß‡∏î** ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≤‡∏°‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤")
    st.stop()

# ‡πÉ‡∏ä‡πâ 3 ‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô 1‚Äì2‚Äì4
last3 = draws[-3:]
# ‡πÉ‡∏ä‡πâ 5 ‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô 3
last5 = draws[-5:] if len(draws) >= 5 else draws[:]

# ---------- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô 1: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡∏à‡∏≤‡∏Å '‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏¥‡∏ö & ‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢' ‡∏Ç‡∏≠‡∏á 3 ‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ----------
def pick_single_from_tens_units(last3_list):
    # ‡∏î‡∏∂‡∏á‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏¥‡∏ö/‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏á‡∏ß‡∏î (XY -> tens=X, units=Y ‡∏à‡∏≤‡∏Å 4 ‡∏´‡∏•‡∏±‡∏Å ABCD: tens=C, units=D)
    pool = []
    for s in last3_list:
        tens = s[-2]   # ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏¥‡∏ö
        unit = s[-1]   # ‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢
        pool.extend([tens, unit])
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏ñ‡∏µ‡πà‡∏™‡∏∏‡∏î; ‡∏ñ‡πâ‡∏≤‡πÄ‡∏™‡∏°‡∏≠ ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î "‡πÉ‡∏Å‡∏•‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏™‡∏∏‡∏î" (‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤)
    ctr = Counter(pool)
    maxc = max(ctr.values())
    cands = [d for d, c in ctr.items() if c == maxc]
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏î‡πâ‡∏ß‡∏¢‡∏´‡∏•‡∏±‡∏Å tie-break: ‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô last3 (‡∏ß‡∏ô‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏±‡∏á)
    for s in reversed(last3_list):
        if s[-2] in cands: chosen = s[-2]; break
        if s[-1] in cands: chosen = s[-1]; break
    return chosen

single_digit = pick_single_from_tens_units(last3)

# ---------- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô 2: ‡∏ú‡∏™‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß ‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‚Äú‡∏ó‡∏∏‡∏Å‡∏´‡∏•‡∏±‡∏Å‚Äù ‡∏Ç‡∏≠‡∏á 3 ‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ----------
# ‡πÄ‡∏≠‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏Ç‡∏≠‡∏á 3 ‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏ó‡∏±‡πâ‡∏á 12 ‡∏´‡∏•‡∏±‡∏Å) ‡πÄ‡∏õ‡πá‡∏ô‡∏•‡∏¥‡∏™‡∏ï‡πå‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡πà‡∏≤->‡πÉ‡∏´‡∏°‡πà
all_digits_last3 = []
for s in last3:
    all_digits_last3.extend(list(s))

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡πâ ‚Äú‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡πÅ‡∏ï‡πà‡∏Ñ‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏ö‚Äù
partners_unique = []
for d in all_digits_last3:
    if d not in partners_unique:
        partners_unique.append(d)

# ‡∏à‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏Å‡πà‡∏≠‡∏ô: 4,5,6,2,1,0
special_order = ['4', '5', '6', '2', '1', '0']
# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏á special ‡∏Å‡πà‡∏≠‡∏ô ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
ordered_partners = []
for sp in special_order:
    if sp in partners_unique:
        ordered_partners.append(sp)
for d in partners_unique:
    if d not in ordered_partners:
        ordered_partners.append(d)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏π‡πà‡πÅ‡∏ö‡∏ö "single+partner"
pair_all = [single_digit + d for d in ordered_partners]
pairs_to_show = pair_all[:5]  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 5 ‡∏ä‡∏∏‡∏î

# ---------- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô 3: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß ‡πÇ‡∏î‡∏¢‡πÄ‡∏ï‡∏¥‡∏° ‚Äú‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏à‡∏≤‡∏Å 5 ‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‚Äù ‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ----------
def missing_digit_from_last5(last5_list):
    seen = set()
    for s in last5_list:
        seen |= set(list(s))
    missing = [str(x) for x in range(10) if str(x) not in seen]
    if missing:
        return sorted(missing, key=lambda x: int(x))[0]  # ‡πÄ‡∏≠‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡∏´‡∏≤‡∏¢‡πÑ‡∏õ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà ‚Äú‡∏û‡∏ö‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏∏‡∏î‚Äù ‡πÉ‡∏ô 5 ‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÅ‡∏ó‡∏ô
    ctr = Counter("".join(last5_list))
    minc = min(ctr.values())
    cands = [d for d, c in ctr.items() if c == minc]
    return sorted(cands, key=lambda x: int(x))[0]

prefix_digit = missing_digit_from_last5(last5)
triplets = [prefix_digit + p for p in pairs_to_show]   # ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö pairs_to_show

# ---------- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô 4: ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏ä‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠ 3 ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏≠‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏û‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏°‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤ ----------
random.seed()  # ‡πÑ‡∏°‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î seed ‡πÉ‡∏´‡πâ‡∏™‡∏∏‡πà‡∏°‡∏à‡∏£‡∏¥‡∏á
picked3 = random.choice(triplets)
thousands = last3[-1][0]   # ‡∏´‡∏•‡∏±‡∏Å‡∏û‡∏±‡∏ô‡∏Ç‡∏≠‡∏á "‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"
four_digit = thousands + picked3

# ---------- ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï/‡∏Ç‡∏ô‡∏≤‡∏î/‡∏™‡∏µ) ----------
st.markdown('<div class="card"><h3>1) ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏¥‡∏ö/‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ç‡∏≠‡∏á 3 ‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)</h3>'
            f'<div class="num-red step1">{single_digit}</div></div>', unsafe_allow_html=True)

st.markdown('<div class="card"><h3>2) ‡πÄ‡∏•‡∏Ç‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß (‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏±‡∏î 5 ‡∏ä‡∏∏‡∏î ‡πÇ‡∏î‡∏¢‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏û‡∏¥‡πÄ‡∏®‡∏© 4,5,6,2,1,0)</h3>'
            f'<div class="num-red step2">{", ".join(pairs_to_show)}</div></div>', unsafe_allow_html=True)

st.markdown(f'<div class="card"><h3>3) ‡πÄ‡∏•‡∏Ç‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß (‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏à‡∏≤‡∏Å 5 ‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: '
            f'<span class="num-red">{prefix_digit}</span> ‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤)</h3>'
            f'<div class="num-red step3">{", ".join(triplets)}</div></div>', unsafe_allow_html=True)

st.markdown('<div class="card"><h3>4) ‡πÄ‡∏•‡∏Ç‡∏™‡∏µ‡πà‡∏ï‡∏±‡∏ß (‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠ 3 ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ï‡∏¥‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏û‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)</h3>'
            f'<div>‡πÄ‡∏•‡∏Ç‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡πà‡∏°‡πÑ‡∏î‡πâ: <span class="num-red">{picked3}</span> '
            f'| ‡∏´‡∏•‡∏±‡∏Å‡∏û‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: <span class="num-red">{thousands}</span></div>'
            f'<div class="num-red step4" style="margin-top:8px;">' + four_digit + '</div></div>',
            unsafe_allow_html=True)

st.caption("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Æ‡∏¥‡∏ß‡∏£‡∏¥‡∏™‡∏ï‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ö‡∏±‡∏ô‡πÄ‡∏ó‡∏¥‡∏á ‡πÑ‡∏°‡πà‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏£‡∏¥‡∏á")
