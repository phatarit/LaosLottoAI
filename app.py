
import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
from collections import Counter
import os

st.set_page_config(page_title="LottoAI Premium", page_icon="üéØ")
st.title("üéØ LottoAI ‚Äì ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏î‡πâ‡∏ß‡∏¢ AI")

today_code = datetime.today().strftime("VIP%y%m%d")

# ‡∏†‡∏≤‡∏©‡∏≤
lang = st.sidebar.radio("üåê Language / ‡∏†‡∏≤‡∏©‡∏≤", ("‡πÑ‡∏ó‡∏¢", "English"))
L = {
    "title": "LottoAI ‚Äì ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏î‡πâ‡∏ß‡∏¢ AI" if lang == "‡πÑ‡∏ó‡∏¢" else "LottoAI ‚Äì Lucky Number Predictor",
    "input": "‡∏ß‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ß‡∏¢‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ ‡πÄ‡∏ä‡πà‡∏ô 123 45)" if lang == "‡πÑ‡∏ó‡∏¢" else "Paste past lottery results (format: 123 45)",
    "analyze": "üîç ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤" if lang == "‡πÑ‡∏ó‡∏¢" else "üîç Basic Prediction",
    "premium": "üíé ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á (Premium)" if lang == "‡πÑ‡∏ó‡∏¢" else "üíé Premium Prediction",
    "upload": "üìé ‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ (.jpg, .png)" if lang == "‡πÑ‡∏ó‡∏¢" else "üìé Upload payment slip (.jpg, .png)",
    "unlocked": "üéâ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô!\n‡∏£‡∏´‡∏±‡∏™‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠: " if lang == "‡πÑ‡∏ó‡∏¢" else "üéâ Thank you for your support!\nYour code is: ",
    "renew": "üîÅ ‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏ Premium (‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡πÉ‡∏´‡∏°‡πà)" if lang == "‡πÑ‡∏ó‡∏¢" else "üîÅ Renew Premium Access",
    "locked": "üîí ‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°" if lang == "‡πÑ‡∏ó‡∏¢" else "üîí Upload slip to unlock premium",
}

# ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
st.header("üìã " + L["input"])
data_input = st.text_area("", height=200)
df = None
if data_input:
    try:
        lines = [line.strip() for line in data_input.strip().split("\n") if line.strip()]
        draws = [line.split() for line in lines]
        df = pd.DataFrame(draws, columns=["‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô", "‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á"])
        st.success("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        st.dataframe(df)
    except:
        st.error("‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ ‡πÄ‡∏ä‡πà‡∏ô 123 45")

# ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
if df is not None and len(df) >= 5:
    if st.button(L["analyze"]):
        last5 = df.tail(5)
        digits = "".join("".join(row) for row in last5.values)
        freq = Counter(digits)
        pie_data = pd.DataFrame(freq.items(), columns=["‡πÄ‡∏•‡∏Ç", "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà"])
        pie_data["‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞"] = pie_data["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà"] / pie_data["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà"].sum() * 100
        st.subheader("üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÄ‡∏•‡∏Ç 0‚Äì9 (5 ‡∏á‡∏ß‡∏î)")
        st.plotly_chart(pie_data.set_index("‡πÄ‡∏•‡∏Ç").plot.pie(y="‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞", autopct="%.1f%%", ylabel="", legend=False, figsize=(4,4)), use_container_width=True)

        top3 = [num for num, _ in freq.most_common(3)]
        missing = sorted(set("0123456789") - set(freq.keys()))
        st.write("üî∫ ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πà‡∏ô:", ", ".join(top3))
        st.write("üîª ‡πÄ‡∏•‡∏Ç‡∏î‡∏±‡∏ö:", ", ".join(missing))

        # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏•‡∏Ç‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß 4 ‡∏ä‡∏∏‡∏î
        st.markdown("### üéØ ‡∏ä‡∏∏‡∏î‡πÄ‡∏•‡∏Ç‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)")
        if len(top3) >= 2:
            two_digits = [a + b for a in top3 for b in top3 if a != b][:4]
            st.markdown(f"**{' '.join(two_digits)}**")

        st.markdown("### üîÆ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÄ‡∏•‡∏Ç‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")
        st.markdown(f"<h1 style='color:red; text-align:center'>{top3[0]}</h1>", unsafe_allow_html=True)

# ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å Premium
if "unlocked_until" not in st.session_state:
    st.session_state.unlocked_until = datetime.now() - timedelta(minutes=1)

now = datetime.now()
is_unlocked = now < st.session_state.unlocked_until

st.markdown("---")
st.subheader(L["premium"])

with st.expander("üîì ‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å"):
    st.image("https://promptpay.io/0869135982/59", caption="PromptPay 59 ‡∏ö‡∏≤‡∏ó", width=250)
    uploaded = st.file_uploader(L["upload"], type=["jpg", "png"])
    if uploaded:
        os.makedirs("slips", exist_ok=True)
        filename = f"slips/{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
        with open(filename, "wb") as f:
            f.write(uploaded.read())
        st.success(f"{L['unlocked']}{today_code}")
        st.session_state.unlocked_until = datetime.now() + timedelta(hours=24)

# ‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏
if is_unlocked:
    if st.button(L["renew"]):
        st.session_state.unlocked_until = datetime.now() - timedelta(minutes=1)
        st.experimental_rerun()

# ‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°‡πÇ‡∏ä‡∏ß‡πå
if datetime.now() < st.session_state.unlocked_until:
    st.markdown("### üîÆ ‡πÄ‡∏•‡∏Ç‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°")
    st.markdown(f"<h2 style='color:red'>‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏ö‡∏ô: 83, 91, 75, 40</h2>", unsafe_allow_html=True)
    st.markdown(f"<h2 style='color:red'>‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á: 29, 10, 58, 63</h2>", unsafe_allow_html=True)
    st.markdown(f"<h2 style='color:red'>‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô: 538</h2>", unsafe_allow_html=True)

    # ‡πÄ‡∏•‡∏Ç‡∏•‡∏≤‡∏Å
    st.markdown("### üß© ‡πÄ‡∏•‡∏Ç‡∏•‡∏≤‡∏Å‡∏à‡∏≤‡∏Å 538")
    base = "538"[1:]
    dragged = [f"{i}{base}" for i in range(10)]
    st.write(", ".join(dragged))
else:
    st.warning(L["locked"])
