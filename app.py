# app_v6.py
# -*- coding: utf-8 -*-
import streamlit as st
from collections import Counter, defaultdict

st.set_page_config(
    page_title="Lao Lotto V.6",
    page_icon="üéØ",
    layout="centered"
)

# ----------------- STYLE -----------------
st.markdown("""
<style>
:root{ --blue:#1f57c3; --red:#e0252a; --ink:#0f172a; }
.stApp { background:#f7f9ff; }
.block-container{ max-width:980px; }
.title { color: var(--blue); font-weight:900; font-size: 2rem; line-height:1.1; }
.subtitle { color:#1f2937; margin-top:4px; font-size:0.95rem; }
.card {
  background:#ffffff; border:3px solid var(--blue); border-radius:16px;
  padding:14px 16px; margin:12px 0 16px 0; box-shadow: 0 6px 18px rgba(0,0,0,0.07);
}
.heading { font-weight:900; font-size:1.1rem; color:#0f172a; margin-top:6px; }
.num-xl { color:var(--red); font-weight:900; font-size:2.6rem; display:flex; gap:18px; align-items:baseline; flex-wrap:wrap; }
.num-xl .label{ font-size:0.95rem; font-weight:800; color:#0f172a; background:#eef2ff; border:1px solid #c7d2fe; border-radius:8px; padding:2px 8px; }
.num-xl .digit{ font-size:3.1rem; font-weight:900; color:var(--red); margin-left:8px; }
.num-lg { color:var(--red); font-weight:900; font-size:2.05rem; line-height:1.25; }
.num-md { color:var(--red); font-weight:900; font-size:1.85rem; line-height:1.25; }
.num-sm { color:var(--red); font-weight:900; font-size:1.65rem; }
.tag { display:inline-block; padding:2px 8px; border-radius:10px; background:#eef2ff; border:1px solid #c7d2fe; color:#0f172a; font-weight:700; font-size:0.8rem; margin-left:8px;}
.badge { display:inline-block; padding:4px 10px; border:2px solid var(--red); border-radius:12px; margin:4px 8px 0 0; }
hr{ border:none; border-top:1px dashed #cbd5e1; margin:6px 0 10px; }
.footer { text-align:center; margin: 18px 0 8px 0; color:#475569; font-weight:700; }
.small { color:#475569; font-size:0.85rem; }
</style>
""", unsafe_allow_html=True)

# ----------------- HEADER -----------------
st.markdown('<div class="title">Lao Lotto V.6 ‚Äî Statistic-Driven Picks</div>', unsafe_allow_html=True)
st.markdown('<div class="subtitle">‡∏ß‡∏≤‡∏á ‚Äú‡πÄ‡∏•‡∏Ç 4 ‡∏´‡∏•‡∏±‡∏Å‚Äù ‡∏´‡∏•‡∏≤‡∏¢‡∏á‡∏ß‡∏î (‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß) ‚Äî ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ ‡πÄ‡∏î‡πà‡∏ô/‡∏£‡∏≠‡∏á, 2 ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡πà‡∏ö‡∏ô-‡∏•‡πà‡∏≤‡∏á 5 ‡∏ä‡∏∏‡∏î (‡∏™‡∏•‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ), 3 ‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á 5 ‡∏ä‡∏∏‡∏î ‡πÅ‡∏•‡∏∞ 4 ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏à‡∏≤‡∏Å 3 ‡∏ï‡∏±‡∏ß</div>', unsafe_allow_html=True)

# ----------------- INPUT -----------------
ph = ("‡∏ß‡∏≤‡∏á‡∏ó‡∏µ‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î (‡∏Å‡∏µ‡πà‡∏á‡∏ß‡∏î‡∏Å‡πá‡πÑ‡∏î‡πâ ‚â• 20 ‡∏à‡∏∞‡∏¢‡∏¥‡πà‡∏á‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£)\n"
      "‡πÄ‡∏ä‡πà‡∏ô:\n9767\n5319\n1961\n4765\n2633\n...")

raw = st.text_area("‡∏ß‡∏≤‡∏á‡∏ú‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (4 ‡∏´‡∏•‡∏±‡∏Å) ‡∏ó‡∏µ‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î", height=220, placeholder=ph)
rows = [s.strip() for s in raw.splitlines()]
draws = [s for s in rows if s.isdigit() and len(s) == 4]

st.write(f"‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ **{len(draws)}** ‡∏á‡∏ß‡∏î")
if len(draws) < 20:
    st.info("‡πÉ‡∏™‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 20 ‡∏á‡∏ß‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥.", icon="‚ÑπÔ∏è")
    st.stop()

# ----------------- HELPERS -----------------
def multiset_key2(p):  # unordered pair key
    return tuple(sorted(p))

def multiset_key3(s):  # unordered triple key
    return tuple(sorted(s))

def normalize_scores(scores_dict):
    # min-max to [0,1] for display as "confidence"
    vals = list(scores_dict.values())
    lo, hi = min(vals), max(vals)
    if hi - lo == 0:
        return {k: 1.0 for k in scores_dict}
    return {k: (v - lo) / (hi - lo) for k, v in scores_dict.items()}

# ----------------- STATS -----------------
N = len(draws)
digits_all = "".join(draws)
cnt_digit_overall = Counter(digits_all)               # ‡∏ó‡∏∏‡∏Å‡∏´‡∏•‡∏±‡∏Å‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô
cnt_pos0 = Counter([d[0] for d in draws])             # ‡∏´‡∏•‡∏±‡∏Å‡∏û‡∏±‡∏ô
cnt_pos1 = Counter([d[1] for d in draws])             # ‡∏´‡∏•‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏¢
cnt_pos2 = Counter([d[2] for d in draws])             # ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏¥‡∏ö
cnt_pos3 = Counter([d[3] for d in draws])             # ‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡∏•‡πà‡∏≤‡∏á)

# ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ 2 ‡∏ï‡∏±‡∏ß: ‡∏´‡∏ô‡πâ‡∏≤ (0-1), ‡∏Å‡∏•‡∏≤‡∏á (1-2), ‡∏ó‡πâ‡∏≤‡∏¢ (2-3)
pairs_front = Counter([d[:2] for d in draws])
pairs_mid   = Counter([d[1:3] for d in draws])
pairs_back  = Counter([d[2:]  for d in draws])

# ‡∏ô‡∏±‡∏ö‡πÅ‡∏ö‡∏ö "‡πÑ‡∏°‡πà‡∏™‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö last-2 (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö "‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ")
pairs_back_unordered = Counter([multiset_key2(d[2:]) for d in draws])

# ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ 3 ‡∏ï‡∏±‡∏ß‡∏ó‡πâ‡∏≤‡∏¢
triples_back = Counter([d[1:] for d in draws])  # 3 ‡∏ï‡∏±‡∏ß‡∏ó‡πâ‡∏≤‡∏¢ (‡∏´‡∏•‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏¢-‡∏™‡∏¥‡∏ö-‡∏´‡∏ô‡πà‡∏ß‡∏¢)
triples_tail = Counter([d[1:] for d in draws])  # alias (‡πÉ‡∏ä‡πâ‡∏£‡∏ß‡∏° scoring)

# ----------------- SCORING -----------------
# 1) ‡πÄ‡∏î‡πà‡∏ô/‡∏£‡∏≠‡∏á (single digit)
#   - ‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤: overall freq, last-digit freq (pos3), ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÉ‡∏ô "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏¥‡∏ö/‡∏´‡∏ô‡πà‡∏ß‡∏¢"
single_scores = defaultdict(float)
for d in "0123456789":
    f_all = cnt_digit_overall.get(d, 0) / (4*N)            # ‡∏ó‡∏∏‡∏Å‡∏´‡∏•‡∏±‡∏Å
    f_last = cnt_pos3.get(d, 0) / N                        # ‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢
    f_10   = cnt_pos2.get(d, 0) / N                        # ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏¥‡∏ö
    f_100  = cnt_pos1.get(d, 0) / N                        # ‡∏´‡∏•‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏¢ (‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö triple/quad)
    # ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏•‡πà‡∏≤‡∏á (last) ‡πÅ‡∏•‡∏∞‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á
    score = 0.45*f_last + 0.35*f_10 + 0.15*f_all + 0.05*f_100
    single_scores[d] = score

# confidence (0..1) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á
single_conf = normalize_scores(single_scores)
singles_ranked = sorted(single_scores.keys(), key=lambda x: (-single_scores[x], x))
main_digit, sub_digit = singles_ranked[0], singles_ranked[1]

# 2) ‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏ö‡∏ô-‡∏•‡πà‡∏≤‡∏á 5 ‡∏ä‡∏∏‡∏î (‡∏™‡∏•‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ)
#   - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å "‡πÄ‡∏î‡πà‡∏ô/‡∏£‡∏≠‡∏á" ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏ö‡πà‡∏≠‡∏¢‡πÉ‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏¥‡∏ö-‡∏´‡∏ô‡πà‡∏ß‡∏¢
cooccur_with = Counter()
for d in draws:
    a, b = d[2], d[3]   # ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏¥‡∏ö-‡∏´‡∏ô‡πà‡∏ß‡∏¢
    cooccur_with[a] += 1
    cooccur_with[b] += 1

# pool: ‡πÄ‡∏î‡πà‡∏ô/‡∏£‡∏≠‡∏á + top digits ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠‡∏ö‡πà‡∏≠‡∏¢‡πÉ‡∏ô‡∏™‡∏¥‡∏ö/‡∏´‡∏ô‡πà‡∏ß‡∏¢
top_tail_digits = [d for d, _ in Counter([x for d in draws for x in d[2:]]).most_common(6)]
pool_digits = list(dict.fromkeys([main_digit, sub_digit] + top_tail_digits))

pair_scores = {}
pair_seen_unordered = set()
cand_pairs = []
for a in pool_digits:
    for b in pool_digits:
        if a == b: 
            continue
        # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (2,3) ‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ö‡∏ö‡∏ï‡∏£‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏•‡∏±‡∏ö
        score = 0.0
        score += 0.6 * (pairs_back.get(a+b, 0) + pairs_back.get(b+a, 0))
        # ‡∏ö‡∏π‡∏™‡∏ï‡πå‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö‡πÄ‡∏î‡πà‡∏ô/‡∏£‡∏≠‡∏á
        if a in (main_digit, sub_digit) or b in (main_digit, sub_digit):
            score += 0.4
        # ‡∏ö‡∏π‡∏™‡∏ï‡πå‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô‡∏™‡∏¥‡∏ö/‡∏´‡∏ô‡πà‡∏ß‡∏¢
        score += 0.1 * (cnt_pos2.get(a,0)+cnt_pos3.get(b,0)+cnt_pos2.get(b,0)+cnt_pos3.get(a,0))/max(N,1)
        key_u = multiset_key2(a+b)
        if key_u not in pair_seen_unordered:
            pair_seen_unordered.add(key_u)
            cand_pairs.append((a+b, score))

cand_pairs = sorted(cand_pairs, key=lambda x:(-x[1], x[0]))[:5]
pairs5 = [p for p,_ in cand_pairs]

# 3) ‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á 5 ‡∏ä‡∏∏‡∏î
#   - ‡πÉ‡∏ä‡πâ ‚Äú‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏±‡∏î‡πÑ‡∏î‡πâ‚Äù ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ï‡∏¥‡∏°‡∏≠‡∏µ‡∏Å 1 ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° (‡πÄ‡∏ô‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏¢‡∏Å‡∏±‡∏ö‡πÄ‡∏î‡πà‡∏ô/‡∏£‡∏≠‡∏á)
triple_scores = {}
for p in pairs5:
    a, b = p[0], p[1]  # ‡∏™‡∏¥‡∏ö-‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
    # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏¢‡∏à‡∏≤‡∏Å: ‡πÄ‡∏î‡πà‡∏ô, ‡∏£‡∏≠‡∏á, top ‡∏´‡∏•‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏¢‡∏à‡∏£‡∏¥‡∏á
    top_pos1_digits = [d for d,_ in cnt_pos1.most_common(6)]
    choices = list(dict.fromkeys([main_digit, sub_digit] + top_pos1_digits))
    for h in choices:
        t = h + a + b
        # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ 3 ‡∏ï‡∏±‡∏ß‡∏ó‡πâ‡∏≤‡∏¢, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏¢‡∏à‡∏£‡∏¥‡∏á, ‡∏ö‡∏π‡∏™‡∏ï‡πå‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏î‡πà‡∏ô/‡∏£‡∏≠‡∏á‡∏õ‡∏ô
        score = 0.6*triples_tail.get(t,0) + 0.25*cnt_pos1.get(h,0)
        if h in (main_digit, sub_digit): score += 0.25
        triple_scores[t] = max(triple_scores.get(t,0), score)

triples5 = [t for t,_ in sorted(triple_scores.items(), key=lambda x:(-x[1], x[0]))[:5]]

# 4) ‡∏™‡∏µ‡πà‡∏ï‡∏±‡∏ß ‡∏à‡∏≤‡∏Å ‚Äú‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏Ñ‡∏±‡∏î‚Äù 1 ‡∏ä‡∏∏‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏™‡πà ‚Äú‡∏ï‡∏±‡∏ß‡πÉ‡∏î‡∏Å‡πá‡πÑ‡∏î‡πâ‚Äù ‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å‡∏û‡∏±‡∏ô
#   - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ï‡∏¥‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏û‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏î‡πà‡∏ô/‡∏£‡∏≠‡∏á/‡∏´‡∏£‡∏∑‡∏≠ top ‡∏´‡∏•‡∏±‡∏Å‡∏û‡∏±‡∏ô
quad_candidates = []
if triples5:
    t = triples5[0]  # ‡∏ï‡∏±‡∏ß‡∏ó‡πá‡∏≠‡∏õ
    top_pos0_digits = [d for d,_ in cnt_pos0.most_common(5)]
    lead_pool = list(dict.fromkeys([main_digit, sub_digit] + top_pos0_digits))
    for L in lead_pool:
        quad_candidates.append(L + t)

# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1 ‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏à‡∏£‡∏¥‡∏á (‡∏ô‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà 4 ‡∏´‡∏•‡∏±‡∏Å)
cnt_full = Counter(draws)
quad_pick = max(quad_candidates, key=lambda q: cnt_full.get(q,0)) if quad_candidates else (singles_ranked[0] + triples5[0] if triples5 else "")

# ----------------- OUTPUT -----------------
# ‡πÄ‡∏î‡πà‡∏ô / ‡∏£‡∏≠‡∏á
st.markdown("""
<div class="card">
  <div class="heading">‡πÄ‡∏î‡πà‡∏ô / ‡∏£‡∏≠‡∏á (‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)</div>
  <div class="num-xl">
""", unsafe_allow_html=True)
st.markdown(
    f"<span><span class='label'>‡πÄ‡∏î‡πà‡∏ô</span><span class='digit'>{main_digit}</span>"
    f"<span class='tag'>conf ~ {single_conf[main_digit]*100:.0f}%</span></span>  "
    f"<span><span class='label'>‡∏£‡∏≠‡∏á</span><span class='digit'>{sub_digit}</span>"
    f"<span class='tag'>conf ~ {single_conf[sub_digit]*100:.0f}%</span></span>",
    unsafe_allow_html=True
)
st.markdown("</div></div>", unsafe_allow_html=True)

# 2 ‡∏ï‡∏±‡∏ß (‡∏ö‡∏ô-‡∏•‡πà‡∏≤‡∏á‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ) 5 ‡∏ä‡∏∏‡∏î
st.markdown("""
<div class="card">
  <div class="heading">‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏Ñ‡∏π‡πà (‡∏ö‡∏ô-‡∏•‡πà‡∏≤‡∏á‡∏™‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ) ‚Äî 5 ‡∏ä‡∏∏‡∏î</div>
  <div class="small">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Ñ‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏¥‡∏ö-‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÇ‡∏î‡∏¢‡∏ö‡∏π‡∏™‡∏ï‡πå‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö ‚Äú‡πÄ‡∏î‡πà‡∏ô/‡∏£‡∏≠‡∏á‚Äù</div>
  <div class="num-lg">
""", unsafe_allow_html=True)
st.markdown("  ".join([f"{p} / {p[1]}{p[0]}" for p in pairs5]), unsafe_allow_html=True)
st.markdown("</div></div>", unsafe_allow_html=True)

# 3 ‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á 5 ‡∏ä‡∏∏‡∏î
st.markdown("""
<div class="card">
  <div class="heading">‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á ‚Äî 5 ‡∏ä‡∏∏‡∏î (‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏Ñ‡∏π‡πà‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏Ñ‡∏±‡∏î + ‡∏´‡∏•‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ)</div>
  <div class="num-md">
""", unsafe_allow_html=True)
st.markdown("  ".join(triples5) if triples5 else "-", unsafe_allow_html=True)
st.markdown("</div></div>", unsafe_allow_html=True)

# 4 ‡∏ï‡∏±‡∏ß (‡∏à‡∏≤‡∏Å‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏Ñ‡∏±‡∏î + ‡πÉ‡∏™‡πà‡∏´‡∏•‡∏±‡∏Å‡∏û‡∏±‡∏ô)
st.markdown("""
<div class="card">
  <div class="heading">‡∏™‡∏µ‡πà‡∏ï‡∏±‡∏ß (‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏Ñ‡∏±‡∏î + ‡πÉ‡∏™‡πà‡∏´‡∏•‡∏±‡∏Å‡∏û‡∏±‡∏ô‡∏à‡∏≤‡∏Å ‡πÄ‡∏î‡πà‡∏ô/‡∏£‡∏≠‡∏á/‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏´‡∏•‡∏±‡∏Å‡∏û‡∏±‡∏ô)</div>
  <div class="num-sm">
""", unsafe_allow_html=True)
st.markdown(quad_pick if quad_pick else "-", unsafe_allow_html=True)
st.markdown("</div></div>", unsafe_allow_html=True)

# ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏°‡∏≤‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠)
with st.expander("‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì / ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Ñ‡∏¥‡∏î (‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™)"):
    st.markdown(f"""
- ‡∏á‡∏ß‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: **{N}**  
- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢ (Top 5): {", ".join([f"{d}:{cnt_pos3[d]}" for d,_ in cnt_pos3.most_common(5)])}  
- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏¥‡∏ö (Top 5): {", ".join([f"{d}:{cnt_pos2[d]}" for d,_ in cnt_pos2.most_common(5)])}  
- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏¢ (Top 5): {", ".join([f"{d}:{cnt_pos1[d]}" for d,_ in cnt_pos1.most_common(5)])}  
- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å‡∏û‡∏±‡∏ô (Top 5): {", ".join([f"{d}:{cnt_pos0[d]}" for d,_ in cnt_pos0.most_common(5)])}  

**‡∏™‡∏π‡∏ï‡∏£‡πÄ‡∏î‡πà‡∏ô/‡∏£‡∏≠‡∏á:** 0.45√ófreq(‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢) + 0.35√ófreq(‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏¥‡∏ö) + 0.15√ófreq(‡∏ó‡∏∏‡∏Å‡∏´‡∏•‡∏±‡∏Å‡∏£‡∏ß‡∏°) + 0.05√ófreq(‡∏´‡∏•‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏¢)  
**‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß:** ‡πÄ‡∏ô‡πâ‡∏ô last-2 ‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ö‡∏ö‡∏ï‡∏£‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏•‡∏±‡∏ö + ‡∏ö‡∏π‡∏™‡∏ï‡πå‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏î‡πà‡∏ô/‡∏£‡∏≠‡∏á‡∏£‡πà‡∏ß‡∏°  
**‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á:** ‡∏ï‡πà‡∏≠‡∏¢‡∏≠‡∏î‡∏à‡∏≤‡∏Å‡∏Ñ‡∏π‡πà‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏¢‡∏à‡∏≤‡∏Å (‡πÄ‡∏î‡πà‡∏ô/‡∏£‡∏≠‡∏á/Top ‡∏´‡∏•‡∏±‡∏Å‡∏£‡πâ‡∏≠‡∏¢) ‡πÇ‡∏î‡∏¢‡∏≠‡∏¥‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ 3 ‡∏ï‡∏±‡∏ß‡∏ó‡πâ‡∏≤‡∏¢  
**‡∏™‡∏µ‡πà‡∏ï‡∏±‡∏ß:** ‡πÉ‡∏ä‡πâ‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏™‡πà‡∏´‡∏•‡∏±‡∏Å‡∏û‡∏±‡∏ô‡∏à‡∏≤‡∏Å (‡πÄ‡∏î‡πà‡∏ô/‡∏£‡∏≠‡∏á/Top ‡∏´‡∏•‡∏±‡∏Å‡∏û‡∏±‡∏ô)  
    """)

st.markdown('<div class="footer">‡∏•‡∏¥‡∏Ç‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå@Phatarit#2025</div>', unsafe_allow_html=True)
