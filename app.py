# app.py
# -*- coding: utf-8 -*-
import re
import random
from collections import Counter

import streamlit as st

# ---------------- Page config ----------------
st.set_page_config(
    page_title="Lao Lotto ‚Äî Smart Picks (4 digits)",
    page_icon="üá±üá¶",
    layout="centered",
)

# ---------------- Theme (white bg, red numbers, blue borders) ----------------
st.markdown("""
<style>
.stApp { background:#ffffff; color:#111; }
.block-container { max-width:900px; }
.box {
  border:2px solid #0b5bd3; border-radius:14px; padding:14px 16px; margin:12px 0;
  background:#fff;
}
.big    { font-size:3.2rem; font-weight:800; color:#d41414; letter-spacing:1px; }
.mid    { font-size:2.2rem; font-weight:800; color:#d41414; letter-spacing:1px; }
.small  { font-size:1.8rem; font-weight:800; color:#d41414; letter-spacing:1px; }
.label  { font-size:0.95rem; color:#0b5bd3; font-weight:700; text-transform:uppercase; }
.note   { color:#666; font-size:0.9rem; }
hr { border-color:#e7eefb; }
</style>
""", unsafe_allow_html=True)

st.title("üá±üá¶ Lao Lotto ‚Äî ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå & ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ 4 ‡∏´‡∏•‡∏±‡∏Å")

st.write("‡∏ß‡∏≤‡∏á‡πÄ‡∏•‡∏Ç **4 ‡∏´‡∏•‡∏±‡∏Å/‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î** ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ **5 ‡∏á‡∏ß‡∏î** (‡∏ï‡∏±‡∏ß‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÉ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡∏î‡∏ó‡∏¥‡πâ‡∏á ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 4 ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡πâ‡∏≤‡∏¢‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î)")

# ---------------- Input ----------------
sample = "0543\n0862\n9252\n9767\n5319"
raw = st.text_area("‡∏ß‡∏≤‡∏á‡πÄ‡∏•‡∏Ç 4 ‡∏´‡∏•‡∏±‡∏Å", value=sample, height=180, placeholder="‡πÄ‡∏ä‡πà‡∏ô 0543\n0862\n9252 ...")

lines = [ln for ln in raw.splitlines() if ln.strip()]

def extract_last_4digits(s: str) -> str | None:
    """‡∏Ñ‡∏∑‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 4 ‡∏´‡∏•‡∏±‡∏Å '‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢' ‡πÉ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏±‡πâ‡∏ô ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏∑‡∏ô None"""
    groups = re.findall(r"(\d{4})", s)
    return groups[-1] if groups else None

draws_all = []
for ln in lines:
    d = extract_last_4digits(ln.strip())
    if d: draws_all.append(d)

st.write(f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: **{len(draws_all)}** ‡∏á‡∏ß‡∏î ‚Üí " +
         (", ".join(draws_all[-10:]) if draws_all else "‚Äî"))

if len(draws_all) < 5:
    st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ **5 ‡∏á‡∏ß‡∏î** ‡∏à‡∏∂‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ")
    st.stop()

# ---------------- Core helpers ----------------
def digits_from_draws(draws: list[str]) -> list[str]:
    out = []
    for d in draws:
        out.extend(list(d))
    return out

def most_frequent_digit(last5: list[str]) -> str:
    c = Counter(digits_from_draws(last5))
    # ‡∏´‡∏≤‡∏Å‡πÄ‡∏™‡∏°‡∏≠‡∏Å‡∏±‡∏ô ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    top_cnt = max(c.values())
    candidates = sorted([d for d, n in c.items() if n == top_cnt], key=lambda x: int(x))
    return candidates[0]

def partner_digits_from_last3(last3: list[str]) -> list[str]:
    """‡∏Ñ‡∏∑‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏ö‡∏ö unique ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏≤‡∏Å‡∏è ‡∏à‡∏≤‡∏Å 3 ‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏£‡∏ß‡∏° 12 ‡∏´‡∏•‡∏±‡∏Å)"""
    seen = set()
    ordered = []
    for d in "".join(last3):
        if d not in seen:
            seen.add(d); ordered.append(d)
    return ordered

def select_top5_pairs(hot: str, partners: list[str]) -> list[str]:
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç 2 ‡∏´‡∏•‡∏±‡∏Å hot+digit ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏±‡∏î 5 ‡∏ä‡∏∏‡∏î
    - ‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏û‡∏¥‡πÄ‡∏®‡∏©: 4,5,6,2,1,0 ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô partners)
    - ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô partners ‡πÄ‡∏î‡∏¥‡∏°
    - ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Ñ‡∏π‡πà‡∏ã‡πâ‡∏≥‡πÄ‡∏ä‡πà‡∏ô 22 ‡πÑ‡∏î‡πâ (‡∏ñ‡πâ‡∏≤ digit == hot ‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô partners)
    """
    special_order = ['4','5','6','2','1','0']
    preferred = [d for d in special_order if d in partners]
    others    = [d for d in partners if d not in preferred]
    order = preferred + others
    pairs = [hot + d for d in order]
    # ‡∏Ñ‡∏±‡∏î 5 ‡∏ä‡∏∏‡∏î‡πÅ‡∏£‡∏Å
    return pairs[:5]

def missing_digit_in_last5(last5: list[str]) -> str:
    used = set(digits_from_draws(last5))
    missing = [str(d) for d in range(10) if str(d) not in used]
    if missing:
        return sorted(missing, key=lambda x:int(x))[0]
    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏∏‡∏î‡πÅ‡∏ó‡∏ô
    c = Counter(digits_from_draws(last5))
    min_cnt = min(c.values())
    leasts = sorted([d for d, n in c.items() if n == min_cnt], key=lambda x:int(x))
    return leasts[0]

# ---------------- Compute per spec ----------------
last5 = draws_all[-5:]               # ‡πÉ‡∏ä‡πâ‡∏´‡∏≤ hot & missing
last3 = draws_all[-3:]               # ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏´‡∏•‡πà‡∏á partner
latest_draw = draws_all[-1]          # ‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏Å‡∏û‡∏±‡∏ô‡∏Ç‡πâ‡∏≠ 4

# 1) ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡∏ñ‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô 5 ‡∏á‡∏ß‡∏î
hot = most_frequent_digit(last5)

# 2) ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å 3 ‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‚Üí ‡∏Ñ‡∏±‡∏î 5 ‡∏ä‡∏∏‡∏î ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ 4,5,6,2,1,0 ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
partners = partner_digits_from_last3(last3)
pairs_2d = select_top5_pairs(hot, partners)

# 3) ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏à‡∏≤‡∏Å 5 ‡∏á‡∏ß‡∏î ‚Üí ‡πÉ‡∏™‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏ô‡πâ‡∏≤
missing = missing_digit_in_last5(last5)
triples = [missing + p for p in pairs_2d]

# 4) ‡∏™‡∏∏‡πà‡∏° 3 ‡∏ï‡∏±‡∏ß 1 ‡∏ä‡∏∏‡∏î ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πâ ‚Äú‡∏´‡∏•‡∏±‡∏Å‡∏û‡∏±‡∏ô‚Äù ‡∏à‡∏≤‡∏Å‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
random.seed()               # ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
pick3 = random.choice(triples)
thousand = latest_draw[0]   # ‡∏´‡∏•‡∏±‡∏Å‡∏û‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î = ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏™‡∏ï‡∏£‡∏¥‡∏á 4 ‡∏´‡∏•‡∏±‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
four_digit = thousand + pick3

# ---------------- Display ----------------
st.markdown("<div class='box'><div class='label'>1) ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß (‡πÄ‡∏Å‡∏¥‡∏î‡∏ñ‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÉ‡∏ô 5 ‡∏á‡∏ß‡∏î)</div>"
            f"<div class='big'>{hot}</div></div>", unsafe_allow_html=True)

st.markdown("<div class='box'><div class='label'>2) ‡πÄ‡∏•‡∏Ç‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß (‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß √ó 3 ‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î, ‡∏Ñ‡∏±‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏© 4,5,6,2,1,0)</div>"
            f"<div class='mid'>{', '.join(pairs_2d)}</div>"
            "<div class='note'>‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏Ñ‡∏±‡∏î: ‡∏ñ‡πâ‡∏≤ hot=2 ‡πÅ‡∏•‡∏∞ 3 ‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏°‡∏µ 0,1,2,3,4,5,6..."
            " ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á 24,25,26,22,20 ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏ï‡∏±‡∏ß‡∏≠‡∏∑‡πà‡∏ô ‡πÜ</div></div>", unsafe_allow_html=True)

st.markdown("<div class='box'><div class='label'>3) ‡πÄ‡∏•‡∏Ç‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß (‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡πÉ‡∏ô 5 ‡∏á‡∏ß‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏´‡∏ô‡πâ‡∏≤)</div>"
            f"<div class='mid'>{', '.join(triples)}</div>"
            f"<div class='note'>‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏ï‡∏¥‡∏°: {missing}</div></div>", unsafe_allow_html=True)

st.markdown("<div class='box'><div class='label'>4) ‡πÄ‡∏•‡∏Ç‡∏™‡∏µ‡πà‡∏ï‡∏±‡∏ß 1 ‡∏ä‡∏∏‡∏î (‡∏™‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠ 3 ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ï‡∏¥‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏û‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)</div>"
            f"<div class='small'>{four_digit}</div>"
            f"<div class='note'>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°: {pick3} | ‡∏´‡∏•‡∏±‡∏Å‡∏û‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ({latest_draw}) = {thousand}</div></div>",
            unsafe_allow_html=True)
