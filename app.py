
import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
from collections import Counter
import os
import plotly.graph_objects as go

st.set_page_config(page_title="LottoAI", page_icon="üéØ")
st.title("üéØ LottoAI ‚Äì ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏î‡πâ‡∏ß‡∏¢ AI")

# ‡∏†‡∏≤‡∏©‡∏≤
lang = st.sidebar.radio("üåê Language / ‡∏†‡∏≤‡∏©‡∏≤", ("‡πÑ‡∏ó‡∏¢", "English"))
L = {
    "title": "LottoAI ‚Äì ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πá‡∏î‡∏î‡πâ‡∏ß‡∏¢ AI" if lang == "‡πÑ‡∏ó‡∏¢" else "LottoAI ‚Äì Lucky Number Predictor",
    "input_top": "‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô (‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ ‡πÄ‡∏ä‡πà‡∏ô 538 754 019)" if lang == "‡πÑ‡∏ó‡∏¢" else "Enter 3-digit numbers (e.g. 538 754 019)",
    "input_bottom": "‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á (‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ ‡πÄ‡∏ä‡πà‡∏ô 29 10 58)" if lang == "‡πÑ‡∏ó‡∏¢" else "Enter 2-digit numbers (e.g. 29 10 58)",
    "analyze": "üîç ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤" if lang == "‡πÑ‡∏ó‡∏¢" else "üîç Basic Prediction",
    "clear": "üßº ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" if lang == "‡πÑ‡∏ó‡∏¢" else "üßº Clear Data",
    "premium": "üíé ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á (Premium)" if lang == "‡πÑ‡∏ó‡∏¢" else "üíé Premium Prediction",
    "upload": "üìé ‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ (.jpg, .png)" if lang == "‡πÑ‡∏ó‡∏¢" else "üìé Upload payment slip (.jpg, .png)",
    "unlocked": "üéâ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô!\n‡∏£‡∏´‡∏±‡∏™‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠: " if lang == "‡πÑ‡∏ó‡∏¢" else "üéâ Thank you for your support!\nYour code is: ",
    "renew": "üîÅ ‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏ Premium" if lang == "‡πÑ‡∏ó‡∏¢" else "üîÅ Renew Premium Access",
    "locked": "üîí ‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°" if lang == "‡πÑ‡∏ó‡∏¢" else "üîí Upload slip to unlock premium",
}

# ‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï
st.subheader("üìã " + L["input_top"])
top_input = st.text_input("")
st.subheader(L["input_bottom"])
bottom_input = st.text_input("")

if st.button(L["clear"]):
    st.experimental_rerun()

df = None
if top_input and bottom_input:
    top = top_input.strip().split()
    bottom = bottom_input.strip().split()
    if len(top) == len(bottom):
        df = pd.DataFrame({'‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô': top, '‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á': bottom})
        st.success("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        st.dataframe(df)
    else:
        st.error("‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏ß‡∏î‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")

if df is not None and len(df) >= 5:
    if st.button(L["analyze"]):
        last5 = df.tail(5)
        digits = "".join("".join(row) for row in last5.values)
        freq = Counter(digits)
        pie_data = pd.DataFrame(freq.items(), columns=["‡πÄ‡∏•‡∏Ç", "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà"])
        pie_data["‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞"] = pie_data["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà"] / pie_data["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà"].sum() * 100

        colors = ["#FF9999", "#FFCC99", "#FFFF99", "#CCFF99", "#99FF99",
                  "#99FFFF", "#99CCFF", "#9999FF", "#CC99FF", "#FF99CC"]

        fig = go.Figure(data=[go.Pie(labels=pie_data["‡πÄ‡∏•‡∏Ç"],
                                     values=pie_data["‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞"],
                                     textinfo='label+percent',
                                     marker=dict(colors=colors),
                                     hole=0.3)])
        fig.update_layout(title_text="üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÄ‡∏•‡∏Ç 0‚Äì9 (5 ‡∏á‡∏ß‡∏î‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á)")
        st.plotly_chart(fig, use_container_width=True)

        top3 = [num for num, _ in freq.most_common(3)]
        missing = sorted(set("0123456789") - set(freq.keys()))
        st.write("üî∫ ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πà‡∏ô:", ", ".join(top3))
        st.write("üîª ‡πÄ‡∏•‡∏Ç‡∏î‡∏±‡∏ö:", ", ".join(missing))

        st.markdown("### üéØ ‡∏ä‡∏∏‡∏î‡πÄ‡∏•‡∏Ç‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)")
        if len(top3) >= 2:
            two_digits = [a + b for a in top3 for b in top3 if a != b][:4]
            st.markdown(f"**{' '.join(two_digits)}**")

        st.markdown("### üîÆ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÄ‡∏•‡∏Ç‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")
        st.markdown(f"<h1 style='color:red; text-align:center'>{top3[0]}</h1>", unsafe_allow_html=True)

# ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å premium
today_code = datetime.today().strftime("VIP%y%m%d")
if "unlocked_until" not in st.session_state:
    st.session_state.unlocked_until = datetime.now() - timedelta(minutes=1)

now = datetime.now()
is_unlocked = now < st.session_state.unlocked_until

st.markdown("---")
st.subheader(L["premium"])

with st.expander("üîì ‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å"):
    st.image("https://promptpay.io/0869135982/59", caption="PromptPay 59 ‡∏ö‡∏≤‡∏ó", width=250)
    uploaded = st.file_uploader(L["upload"], type=["jpg", "png"])
    if uploaded:
        os.makedirs("slips", exist_ok=True)
        filename = f"slips/{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
        with open(filename, "wb") as f:
            f.write(uploaded.read())
        st.success(f"{L['unlocked']}{today_code}")
        st.session_state.unlocked_until = datetime.now() + timedelta(hours=24)

if is_unlocked:
    if st.button(L["renew"]):
        st.session_state.unlocked_until = datetime.now() - timedelta(minutes=1)
        st.experimental_rerun()

if datetime.now() < st.session_state.unlocked_until:
    st.markdown("### üîÆ ‡πÄ‡∏•‡∏Ç‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°")
    st.markdown(f"<h2 style='color:red'>‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏ö‡∏ô: 83, 91, 75, 40</h2>", unsafe_allow_html=True)
    st.markdown(f"<h2 style='color:red'>‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á: 29, 10, 58, 63</h2>", unsafe_allow_html=True)
    st.markdown(f"<h2 style='color:red'>‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô: 538</h2>", unsafe_allow_html=True)

    st.markdown("### üß© ‡πÄ‡∏•‡∏Ç‡∏•‡∏≤‡∏Å‡∏à‡∏≤‡∏Å 538")
    base = "538"[1:]
    dragged = [f"{i}{base}" for i in range(10)]
    st.write(", ".join(dragged))
else:
    st.warning(L["locked"])
