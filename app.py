import streamlit as st
import pandas as pd
from datetime import datetime, timedelta
from collections import Counter
from itertools import permutations
import traceback, os
try:
    import plotly.graph_objects as go
except ModuleNotFoundError:
    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ Plotly ‚Äì ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á `pip install plotly` ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà")
    st.stop()

st.set_page_config(page_title="LottoAI Premium v3", page_icon="üéØ")
st.title("üéØ LottoAI ‚Äì Lotto Analyzer (Premium v3)")

today_code = datetime.today().strftime("VIP%y%m%d")

# ---------- Input zone ----------
st.subheader("üìã ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏ß‡∏¢‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô ‡πÅ‡∏•‡∏∞‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á ‡πÉ‡∏ä‡πâ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏±‡πà‡∏ô ‡πÄ‡∏ä‡πà‡∏ô 538 29)")
data_input = st.text_area("‡∏ß‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢", height=200, key="bulk_input")

extra_inputs = []
with st.expander("‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏•‡∏∞‡∏á‡∏ß‡∏î"):
    for i in range(1, 6):
        val = st.text_input(f"‡∏á‡∏ß‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° #{i} (‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô ‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ ‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á)", key=f"extra_{i}")
        if val:
            extra_inputs.append(val)

# merge & clean
all_input = data_input.strip().split("\n") + extra_inputs
draws = []
for idx, line in enumerate(all_input, start=1):
    if not line.strip():
        continue
    try:
        top, bottom = line.strip().split()
        if (len(top) == 3 and len(bottom) == 2 and top.isdigit() and bottom.isdigit()):
            draws.append((top, bottom))
        else:
            st.warning(f"‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î {idx} ‚Üí '{line}' (‡∏Ç‡πâ‡∏≤‡∏°)")
    except ValueError:
        st.warning(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏ô/‡∏•‡πà‡∏≤‡∏á‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÉ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î {idx} ‚Üí '{line}' (‡∏Ç‡πâ‡∏≤‡∏°)")

if len(draws) < 5:
    st.info("‚ö†Ô∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 5 ‡∏á‡∏ß‡∏î‡∏à‡∏∂‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏î‡πâ")
    st.stop()

df = pd.DataFrame(draws, columns=["‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô", "‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á"])
st.success(f"üìå ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(df)} ‡∏á‡∏ß‡∏î")
st.dataframe(df, use_container_width=True)

# ---------- Helper : ‡∏™‡∏π‡∏ï‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á ----------
def predict_premium(df: pd.DataFrame):
    """Return advanced predictions using 6 empirical formulas."""
    draws = list(df[['‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô', '‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á']].itertuples(index=False, name=None))
    all_digits = "".join("".join(pair) for pair in draws)

    # 1) HOT digits (frequency top 5)
    hot_digits = [d for d, _ in Counter(all_digits).most_common(5)]

    # 2) RUN digits (‡∏•‡∏≤‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡πà‡∏≤‡∏á‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
    last_top, last_bottom = draws[-1]
    run_digits = list(last_bottom)

    # 3) Sum-mod 10 ‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    sum_mod = str(sum(int(d) for d in last_top) % 10)

    # 4) ‡∏Ñ‡∏π‡πà‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    pair_reverse = last_bottom[::-1]

    # ‡∏£‡∏ß‡∏° candidate digits (‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç)
    candidate_digits = []
    for d in run_digits + [sum_mod] + hot_digits:
        if d not in candidate_digits:
            candidate_digits.append(d)
    while len(candidate_digits) < 6:
        candidate_digits.append(str((int(candidate_digits[-1]) + 1) % 10))

    # Filter two‚Äëdigit numbers (‡∏ï‡∏±‡∏î‡πÄ‡∏ö‡∏¥‡πâ‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏û‡∏±‡∏Å)
    two_predictions = []
    for a in candidate_digits:
        for b in candidate_digits:
            if a == b:
                continue
            num = a + b

            # ‡∏™‡∏π‡∏ï‡∏£‡∏™‡∏π‡∏á‚Äë‡∏ï‡πà‡∏≥ / ‡∏Ñ‡∏π‡πà‚Äë‡∏Ñ‡∏µ‡πà ‡∏™‡∏•‡∏±‡∏ö (‡∏´‡∏≤‡∏Å‡∏•‡πà‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ñ‡∏π‡πà ‚Üí ‡∏Ñ‡∏£‡∏≤‡∏ß‡∏ô‡∏µ‡πâ‡∏Ñ‡∏µ‡πà)
            want_odd = int(last_bottom[-1]) % 2 == 0
            if want_odd and int(b) % 2 == 0:
                continue
            two_predictions.append(num)
    two_predictions = two_predictions[:12]

    # Build three‚Äëdigit candidates (‡πÑ‡∏°‡πà‡πÄ‡∏ö‡∏¥‡πâ‡∏• & ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á)
    three_predictions = []
    for perm in permutations(candidate_digits, 3):
        if perm[0] != perm[1] and perm[1] != perm[2] and perm[0] != perm[2]:
            three_predictions.append("".join(perm))
        if len(three_predictions) == 10:
            break

    return two_predictions, three_predictions, candidate_digits, sum_mod, pair_reverse

# ---------- Normal analysis (5 ‡∏á‡∏ß‡∏î) ----------
if st.button("üîç ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ (5 ‡∏á‡∏ß‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)"):
    try:
        recent = df.tail(5)
        digits = "".join("".join(row) for row in recent.values)
        freq = Counter(digits)
        pie_data = pd.DataFrame(freq.items(), columns=["‡πÄ‡∏•‡∏Ç", "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà"])
        pie_data["‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞"] = pie_data["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà"] / pie_data["‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà"].sum() * 100

        fig = go.Figure(data=[go.Pie(labels=pie_data["‡πÄ‡∏•‡∏Ç"],
                                     values=pie_data["‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞"],
                                     textinfo='label+percent',
                                     hole=0.3)])
        fig.update_layout(title_text="üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÄ‡∏•‡∏Ç 0‚Äì9 (5 ‡∏á‡∏ß‡∏î)")
        st.plotly_chart(fig, use_container_width=True)

        top3 = [num for num, _ in freq.most_common(3)]
        missing = sorted(set("0123456789") - set(freq.keys()))
        st.write("üî∫ ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡πà‡∏ô:", ", ".join(top3))
        st.write("üîª ‡πÄ‡∏•‡∏Ç‡∏î‡∏±‡∏ö:", ", ".join(missing))

        if len(top3) >= 2:
            two_digits = [a + b for a in top3 for b in top3 if a != b][:4]
            st.markdown("### üéØ ‡∏ä‡∏∏‡∏î‡πÄ‡∏•‡∏Ç‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)")
            st.markdown(f"**{' '.join(two_digits)}**")

        st.markdown("### üîÆ ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÄ‡∏•‡∏Ç‡∏ñ‡∏±‡∏î‡πÑ‡∏õ")
        st.markdown(f"<h1 style='color:red; text-align:center'>{top3[0]}</h1>", unsafe_allow_html=True)
    except Exception as e:
        st.exception(e)

# ---------- Premium zone ----------
if "unlocked_until" not in st.session_state:
    st.session_state.unlocked_until = datetime.now() - timedelta(minutes=1)

st.markdown("---")
st.subheader("üíé ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á (Premium)")

with st.expander("üîì ‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å"):
    st.image("https://promptpay.io/0869135982/59", caption="PromptPay 59 ‡∏ö‡∏≤‡∏ó", width=250)
    uploaded = st.file_uploader("üìé ‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ (.jpg, .png)", type=["jpg", "png"])
    if uploaded:
        try:
            os.makedirs("slips", exist_ok=True)
            filename = f"slips/{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
            with open(filename, "wb") as f:
                f.write(uploaded.read())
            st.success(f"üéâ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô! ‡∏£‡∏´‡∏±‡∏™‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠: {today_code}")
            st.session_state.unlocked_until = datetime.now() + timedelta(hours=24)
        except Exception as e:
            st.exception(e)

if datetime.now() < st.session_state.unlocked_until:
    st.markdown("### üîÆ ‡∏ú‡∏•‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏° (‡∏™‡∏π‡∏ï‡∏£‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á)")
    try:
        two_preds, three_preds, cand_digits, sum_mod, pair_rev = predict_premium(df)
        st.markdown(f"**‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß (‡∏ö‡∏ô/‡∏•‡πà‡∏≤‡∏á):** {' '.join(two_preds)}")
        st.markdown(f"**‡∏™‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏ö‡∏ô:** {' '.join(three_preds)}")
        st.markdown(f"**‡πÅ‡∏ï‡πâ‡∏°‡∏ú‡∏•‡∏£‡∏ß‡∏° (sum mod 10):** {sum_mod}")
        st.markdown(f"**‡∏Ñ‡∏π‡πà‡∏Å‡∏•‡∏±‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:** {pair_rev}")
        st.markdown(f"**‡∏ä‡∏∏‡∏î‡∏ï‡∏±‡∏ß‡∏ß‡∏¥‡πà‡∏á (candidate digits):** {', '.join(cand_digits)}")

        st.markdown("### üß© ‡πÄ‡∏•‡∏Ç‡∏•‡∏≤‡∏Å‡∏à‡∏≤‡∏Å " + three_preds[0])
        dragged = [f"{i}{three_preds[0][1:]}" for i in range(10)]
        st.write(", ".join(dragged))
    except Exception as e:
        st.exception(e)
else:
    st.warning("üîí ‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°")

st.caption("¬© 2025 LottoAI ‚Äì Advanced Edition v3")
